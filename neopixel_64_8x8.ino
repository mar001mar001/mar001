// C++ code
//
#include <Adafruit_NeoPixel.h>

#define PIN 12            // Pin de datos del Neopixel
#define NUM_LEDS 64      // NÃºmero total de Neopixels en la tira
#define BRIGHTNESS 64    // Brillo del Neopixel (0-255)

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  pixels.begin();               // Inicializar el objeto NeoPixel
  pixels.setBrightness(BRIGHTNESS);  // Establecer el brillo del Neopixel
  pixels.show();               // Mostrar los colores en los Neopixels

  //int matriz_O[64][4] =  {{255, 0, 0, 6}, {255, 0, 0, 88}, {255, 0, 0, 192}, {255, 0, 0, 198}, {255, 0, 0, 198}, {255, 0, 0, 193}, {255, 0, 0, 89}, {255, 0, 0, 6}, {255, 0, 0, 89}, {255, 0, 0, 205}, {255, 0, 0, 89}, {255, 0, 0, 22}, {255, 0, 0, 22}, {255, 0, 0, 88}, {255, 0, 0, 205}, {255, 0, 0, 89}, {254, 0, 0, 206}, {255, 0, 0, 132}, {255, 0, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 3}, {255, 0, 0, 132}, {254, 0, 0, 206}, {255, 0, 0, 241}, {255, 0, 0, 77}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 77}, {255, 0, 0, 241}, {255, 0, 0, 241}, {255, 0, 0, 77}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 77}, {255, 0, 0, 241}, {254, 0, 0, 206}, {255, 0, 0, 132}, {255, 0, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 3}, {255, 0, 0, 132}, {254, 0, 0, 206}, {255, 0, 0, 89}, {254, 0, 0, 206}, {255, 0, 0, 89}, {255, 0, 0, 22}, {255, 0, 0, 22}, {255, 0, 0, 88}, {254, 0, 0, 206}, {255, 0, 0, 89}, {255, 0, 0, 6}, {255, 0, 0, 89}, {255, 0, 0, 193}, {255, 0, 0, 198}, {255, 0, 0, 198}, {255, 0, 0, 193}, {255, 0, 0, 89}, {255, 0, 0, 6}};
  //int matriz_O[64][4] =  {{255, 0, 0, 6}, {255, 0, 0, 88}, {255, 0, 0, 192}, {255, 0, 0, 198}, {255, 0, 0, 198}, {255, 0, 0, 193}, {255, 0, 0, 89}, {255, 0, 0, 6}, {255, 0, 0, 89}, {255, 0, 0, 205}, {255, 0, 0, 89}, {255, 0, 0, 22}, {255, 0, 0, 22}, {255, 0, 0, 88}, {255, 0, 0, 205}, {255, 0, 0, 89}, {254, 0, 0, 206}, {255, 0, 0, 132}, {255, 0, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 3}, {255, 0, 0, 132}, {254, 0, 0, 206}, {255, 0, 0, 241}, {255, 0, 0, 77}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 77}, {255, 0, 0, 241}, {255, 0, 0, 241}, {255, 0, 0, 77}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 77}, {255, 0, 0, 241}, {254, 0, 0, 206}, {255, 0, 0, 132}, {255, 0, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 3}, {255, 0, 0, 132}, {254, 0, 0, 206}, {255, 0, 0, 89}, {254, 0, 0, 206}, {255, 0, 0, 89}, {255, 0, 0, 22}, {255, 0, 0, 22}, {255, 0, 0, 88}, {254, 0, 0, 206}, {255, 0, 0, 89}, {255, 0, 0, 6}, {255, 0, 0, 89}, {255, 0, 0, 193}, {255, 0, 0, 198}, {255, 0, 0, 198}, {255, 0, 0, 193}, {255, 0, 0, 89}, {255, 0, 0, 6}};
  //int matriz_M[64][4] =  {{0, 0, 0, 254}, {0, 0, 0, 189}, {0, 0, 0, 14}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 18}, {0, 0, 0, 198}, {0, 0, 0, 254}, {0, 0, 0, 232}, {0, 0, 0, 213}, {0, 0, 0, 57}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 66}, {0, 0, 0, 214}, {0, 0, 0, 235}, {0, 0, 0, 206}, {0, 0, 0, 158}, {0, 0, 0, 136}, {0, 0, 0, 2}, {0, 0, 0, 4}, {0, 0, 0, 147}, {0, 0, 0, 153}, {0, 0, 0, 214}, {0, 0, 0, 203}, {0, 0, 0, 79}, {0, 0, 0, 193}, {0, 0, 0, 27}, {0, 0, 0, 34}, {0, 0, 0, 195}, {0, 0, 0, 76}, {0, 0, 0, 212}, {0, 0, 0, 203}, {0, 0, 0, 33}, {0, 0, 0, 176}, {0, 0, 0, 90}, {0, 0, 0, 101}, {0, 0, 0, 168}, {0, 0, 0, 35}, {0, 0, 0, 212}, {0, 0, 0, 203}, {0, 0, 0, 21}, {0, 0, 0, 100}, {0, 0, 0, 180}, {0, 0, 0, 186}, {0, 0, 0, 89}, {0, 0, 0, 26}, {0, 0, 0, 212}, {0, 0, 0, 203}, {0, 0, 0, 21}, {0, 0, 0, 33}, {0, 0, 0, 210}, {0, 0, 0, 203}, {0, 0, 0, 27}, {0, 0, 0, 26}, {0, 0, 0, 212}, {0, 0, 0, 203}, {0, 0, 0, 21}, {0, 0, 0, 4}, {0, 0, 0, 69}, {0, 0, 0, 65}, {0, 0, 0, 3}, {0, 0, 0, 26}, {0, 0, 0, 212}};
  int matriz_T[64][4] =  {{255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 123}, {255, 0, 0, 123}, {255, 0, 0, 126}, {254, 0, 0, 212}, {254, 0, 0, 212}, {255, 0, 0, 126}, {255, 0, 0, 123}, {255, 0, 0, 123}, {0, 255, 0, 0}, {0, 0, 255, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 0, 0, 5}, {255, 0, 0, 171}, {255, 0, 0, 171}, {255, 0, 0, 5}, {0, 0, 0, 0}, {0, 0, 0, 0}};
  int matriz_C[64][4] = {{221, 228, 238, 255}, {200, 231, 234, 255}, {203, 220, 207, 255}, {195, 213, 206, 255}, {211, 206, 203, 255}, {200, 197, 208, 255}, {193, 203, 216, 255}, {207, 206, 216, 255}, {213, 227, 234, 255}, {216, 230, 216, 255}, {213, 194, 175, 255}, {220, 191, 186, 255}, {231, 189, 185, 255}, {221, 175, 179, 255}, {205, 188, 192, 255}, {195, 183, 200, 255}, {196, 240, 227, 255}, {206, 233, 208, 255}, {233, 219, 212, 255}, {245, 229, 231, 255}, {239, 223, 230, 255}, {217, 192, 205, 255}, {203, 175, 194, 255}, {195, 187, 209, 255}, {203, 244, 218, 255}, {197, 230, 219, 255}, {241, 237, 240, 255}, {249, 248, 252, 255}, {247, 246, 251, 255}, {235, 225, 241, 255}, {214, 198, 226, 255}, {188, 193, 223, 255}, {216, 236, 214, 255}, {210, 222, 222, 255}, {232, 235, 244, 255}, {223, 234, 244, 255}, {225, 234, 245, 255}, {236, 230, 247, 255}, {219, 208, 237, 255}, {198, 206, 233, 255}, {199, 246, 246, 255}, {209, 239, 243, 255}, {188, 218, 233, 255}, {139, 176, 206, 255}, {143, 179, 209, 255}, {190, 200, 230, 255}, {199, 196, 231, 255}, {192, 199, 224, 255}, {218, 229, 227, 255}, {231, 232, 233, 255}, {175, 191, 213, 255}, {99, 142, 180, 255}, {115, 137, 178, 255}, {174, 159, 197, 255}, {204, 188, 215, 255}, {213, 207, 217, 255}, {232, 224, 221, 255}, {234, 222, 221, 255}, {153, 164, 191, 255}, {106, 139, 172, 255}, {130, 146, 175, 255}, {163, 171, 197, 255}, {215, 211, 221, 255}, {227, 212, 218, 255}};
  // Actualizar los Neopixels con los colores de la matriz
  for (int i = 0; i < 64; i++) { 
    int R =  matriz_T[i][0];
    int G =	 matriz_T[i][1];
    int B =  matriz_T[i][2];
    pixels.setPixelColor(i, pixels.Color(R, G, B));  // Establecer el color del Neopixel
  }
  
  pixels.show();  // Mostrar los colores en los Neopixels
}
void loop() {
}
